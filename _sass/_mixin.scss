/*****************/
/*	_mixin.css
/*****************/
@function rand($min: 0, $max: 100) {
  $str : str-slice(unique-id(), 2);
  $res : toInt($str, 16);
  @return ($res % ($max - $min)) + $min;
}

@mixin rounded($vert, $horz, $radius: 10px) {
	border-#{$vert}-#{$horz}-radius: $radius;
	-moz-border-radius-#{$vert}#{$horz}: $radius;
	-ms-border-radius-#{$vert}#{$horz}: $radius;
	-o-border-radius-#{$vert}#{$horz}: $radius;
	-webkit-border-#{$vert}-#{$horz}-radius: $radius;
}

@mixin allrounded($radius: 10px) {
	-webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; -o-border-radius: $radius; border-radius: $radius;
}

@mixin crossproperty( $property, $value ) {
	-webkit-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	-o-#{$property}: #{$value};
	#{$property}: #{$value};
}

// usage @include font-size(14px)
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@function prefix($property, $prefixes: (webkit moz o ms)) {
    $vendor-prefixed-properties: transform background-clip background-size;
    $result: ();
    @each $prefix in $prefixes {
       @if index($vendor-prefixed-properties, $property) {
         $property: -#{$prefix}-#{$property}
       }
       $result: append($result, $property);
    }
    @return $result;
}

@function trans-prefix($transition, $prefix: moz) {
    $prefixed: ();
    @each $trans in $transition {
        $prop-name: nth($trans, 1);
        $vendor-prop-name: prefix($prop-name, $prefix);
        $prop-vals: nth($trans, 2);
        $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
    }

    @return $prefixed;
}


@mixin transition($values...) {
    $transitions: ();
    @each $declaration in $values {
        $prop: nth($declaration, 1);
        $prop-opts: ();
        $length: length($declaration);
        @for $i from 2 through $length {
            $prop-opts: append($prop-opts, nth($declaration, $i));
        }
        $trans: ($prop, $prop-opts);
        $transitions: append($transitions, $trans, comma);
    }

    -webkit-transition: trans-prefix($transitions, webkit);
    -moz-transition: trans-prefix($transitions, moz);
    -o-transition: trans-prefix($transitions, o);
    transition: $values;
}

@mixin transform( $properties: all ) {
	-webkit-transform: -webkit-#{$properties};
	-moz-transform: -moz-#{$properties};
	-o-transform: -o-#{$properties};
	-ms-transform: -ms-#{$properties};
	transform: #{$properties};
}

@mixin exclusivetransition( $properties: all, $prefix: -webkit, $ms: .5s ) {
  #{$prefix}-transition: #{$ms} cubic-bezier(0.230, 1.000, 0.320, 1.000);
  #{$prefix}-transition-property: #{$properties};
}

@mixin opacity( $opacity: 1 ) {
	$oldopacity : $opacity * 100;
	-khtml-opacity: $opacity; -moz-opacity: $opacity; -ms-filter: "alpha(opacity='#{$oldopacity}')"; opacity: $opacity;
}

// Grid Calculation for Percentages
@function col($n) {
	@return percentage( (( $n * ($columnWidth + $gutterWidth) - $gutterWidth) ) / $gridWidth );
}

// Each column
@mixin column($n) {
	width: col($n);
	margin-left: percentage( $gutterWidth / $gridWidth );
}

@function grid-width($square-width, $square-total-margin, $square-number){
	@return ($square-width + $square-total-margin) * $square-number;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content }
  @-moz-keyframes #{$name} { @content }
  @-o-keyframes #{$name} { @content }
  @keyframes #{$name} { @content }
}

@mixin experimental($property, $value, $moz: true, $webkit: true, $o: true, $ms: true, $khtml: true, $official: true) {
  @if $webkit   { -webkit-#{$property} : $value; }
  @if $khtml    {  -khtml-#{$property} : $value; }
  @if $moz      {    -moz-#{$property} : $value; }
  @if $ms       {     -ms-#{$property} : $value; }
  @if $o        {      -o-#{$property} : $value; }
  @if $official {         #{$property} : $value; }
}

@mixin animation($value) {
  @include experimental(animation, $value);
}

@mixin clearfix {
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
	html.ielt8 & { zoom: 1; }
}

@mixin bp-large {
  @media only screen and (max-width: 1280px),
  only screen and (max-device-width: 1280px) {
    @content;
  }
}

@mixin bp-medium {
  @media only screen and (max-width: 960px),
  only screen and (max-device-width: 960px) {
    @content;
  }
}

@mixin bp-small {
  @media only screen and (max-width: 600px),
  only screen and (max-device-width: 600px) {
    @content;
  }
}
/* USAGE
.sidebar {
  width: 60%;
  float: left;
  margin: 0 2% 0 0;
  @include bp-small {
    width: 100%;
    float: none;
    margin: 0;
  }
}
*/